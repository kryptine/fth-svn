#! @prefix@/bin/@prog_name@ -s
\ @configure_input@
\ play-sound.fth -- plays sound files

\ Copyright (c) 2006-2019 Michael Scholz <mi-scholz@users.sourceforge.net>
\ All rights reserved.
\
\ Redistribution and use in source and binary forms, with or without
\ modification, are permitted provided that the following conditions
\ are met:
\ 1. Redistributions of source code must retain the above copyright
\    notice, this list of conditions and the following disclaimer.
\ 2. Redistributions in binary form must reproduce the above copyright
\    notice, this list of conditions and the following disclaimer in the
\    documentation and/or other materials provided with the distribution.
\
\ THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
\ ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
\ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
\ ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
\ FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
\ DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
\ OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
\ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
\ LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
\ OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
\
\ @(#)play-sound.fth.in	2.1 1/30/19
\
\ % play-sound oboe.snd dog.snd
\ % play-sound -p sndplay cardinal.snd
\ % play-sound -P /usr/opt/sound/SFiles -p play cage.snd

*filename* nil file-basename constant *script-name*
"This is %s v1.2.1, (c) 2006-2019 Michael Scholz"
    '( *script-name* string-upcase ) string-format constant *banner*
  
SIGINT lambda: { sig -- }
	"\n\nSignal %d received.  Process %d canceled.\n"
	    '( sig getpid ) fth-print
	2 (bye)
; signal drop

require clm

: ps-print ( fmt args -- )
	string-format { msg }
	*fth-verbose* if
		"\\ %s\n" '( msg ) fth-print
	then
;

: ps-player <{ output -- }>
	"sox -qV1 %s -d" #( output ) string-format file-system unless
		"exit %d\n" #( exit-status ) fth-warning
	then
;

\ Main program starts here.
let: ( -- )
	\ getopt prints error message
	#t to opterr
	"P:p:qV" { args }
	#t to *fth-verbose*
	<'> ps-player { player }
	begin
		*argv* args getopt ( ch ) dup
	while
		( ch ) case
			<char> P of
				*clm-search-list* optarg array-push drop
			endof
			<char> p of
				optarg to player
			endof
			<char> q of
				#f to *fth-verbose*
			endof
			<char> V of
				"%s\n" '( *banner* ) fth-print
				0 (bye)
			endof
			<char> ? of
				"\
usage: %s [-q] [-P path] [-p player] file...
       %s -V\n" '( *script-name* dup ) fth-print
				1 (bye)
			endof
		endcase
	repeat ( ch ) drop
	\
	*argc* optind - to *argc*
	optind 0 ?do *argv* array-shift drop loop
	\
	"%s" '( *banner* ) ps-print
	*argc* 0> if
		*argv* each { file }
			file find-file file-exists? if
				file *fth-verbose* player play-sound
			else
				"%s doesn't exist in %s"
				    '( file *clm-search-list* ) fth-warning
			then
		end-each
	else
		"nothing to play" '() ps-print
	then
	0 (bye)
;let

\ play-sound.fth.in ends here
